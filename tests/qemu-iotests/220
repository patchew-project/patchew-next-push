#!/usr/bin/env python
#
# Test nbd reconnect
#
# Copyright (c) 2018 Virtuozzo International GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import time

import iotests
from iotests import qemu_img_create, file_path, qemu_nbd_popen

disk_a, disk_b, nbd_sock = file_path('disk_a', 'disk_b', 'nbd-sock')
nbd_uri = 'nbd+unix:///exp?socket=' + nbd_sock

qemu_img_create('-f', iotests.imgfmt, disk_a, '5M')
qemu_img_create('-f', iotests.imgfmt, disk_b, '5M')
srv = qemu_nbd_popen('-k', nbd_sock, '-x', 'exp', '-f', iotests.imgfmt, disk_b)
time.sleep(1)

vm = iotests.VM().add_drive(disk_a)
vm.launch()
vm.hmp_qemu_io('drive0', 'write 0 5M')

print 'blockdev-add:', vm.qmp('blockdev-add', node_name='backup0', driver='raw',
                              file={'driver':'nbd',
                                    'reconnect-attempts':10,
                                    'export': 'exp',
                                    'server': {'type': 'unix',
                                               'path': nbd_sock}})
print 'blockdev-backup:', vm.qmp('blockdev-backup', device='drive0',
                                 sync='full', target='backup0')

time.sleep(1)
print 'Kill NBD server'
srv.kill()

jobs = vm.qmp('query-block-jobs')['return']
if jobs and jobs[0]['offset'] < jobs[0]['len']:
    print 'Backup job is still in progress'

time.sleep(1)

print 'Start NBD server'
srv = qemu_nbd_popen('-k', nbd_sock, '-x', 'exp', '-f', iotests.imgfmt, disk_b)

try:
    e = vm.event_wait('BLOCK_JOB_COMPLETED')
    print e['event'], ':', e['data']
except:
    pass

print 'blockdev-del:', vm.qmp('blockdev-del', node_name='backup0')
srv.kill()
vm.shutdown()
